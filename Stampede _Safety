{
  "name": "stampede-safety",
  "version": "1.0.0",
  "description": "Web platform to help reduce crowd stampedes: reporting + monitoring.",
  "main": "app.js",
  "scripts": {
    "start": "node app.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "mongoose": "^6.9.1",
    "body-parser": "^1.20.1",
    "ejs": "^3.1.9",
    "dotenv": "^16.0.3"
  }
}
require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');

const app = express();
const PORT = process.env.PORT || 3000;

// Connect to MongoDB
mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log("✅ MongoDB connected"))
  .catch(err => console.error("❌ Connection error:", err));

app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static("public"));
app.set("view engine", "ejs");

// Routes
const routes = require('./routes/index');
app.use('/', routes);

app.listen(PORT, () => {
  console.log(`🚀 Server is running at http://localhost:${PORT}`);
});
const mongoose = require('mongoose');

const reportSchema = new mongoose.Schema({
  location: { type: String, required: true },
  description: { type: String, required: true },
  timestamp: { type: Date, default: Date.now }
});

module.exports = mongoose.model('Report', reportSchema);
const express = require('express');
const router = express.Router();
const Report = require('../models/Report');

// Home
router.get('/', (req, res) => {
  res.render("pages/home");
});

// Education
router.get('/education', (req, res) => {
  res.render("pages/education");
});

// Blog
router.get('/blog', (req, res) => {
  res.render("pages/blog");
});

// Report form
router.get('/report', (req, res) => {
  res.render("pages/report");
});
router.post('/report', async (req, res) => {
  const { location, description } = req.body;
  try {
    await Report.create({ location, description });
    res.redirect('/thanks');
  } catch (err) {
    console.error(err);
    res.send("Error saving report.");
  }
});

// Thank you
router.get('/thanks', (req, res) => {
  res.send("Thank you — your report has been submitted.");
});

// Dashboard
router.get('/dashboard', async (req, res) => {
  const reports = await Report.find().sort({ timestamp: -1 });
  res.render("pages/dashboard", { reports });
});

module.exports = router;
<!DOCTYPE html>
<html>
<head>
  <title>Stampede Safety Initiative</title>
</head>
<body>
  <h1>Welcome to the Stampede Safety Initiative</h1>
  <p>Our mission: to reduce crowd disasters by awareness, real‑time reporting, and community action.</p>
  <nav>
    <a href="/">Home</a> |
    <a href="/education">Education</a> |
    <a href="/blog">Blog</a> |
    <a href="/report">Report a Crowd</a> |
    <a href="/dashboard">Dashboard</a>
  </nav>
</body>
</html>
node_modules/
.env
# Stampede Safety Initiative

A web platform to help reduce crowd stampedes — includes incident reporting, educational resources, blog/news updates, and admin dashboard.

## Features
- Home page with mission statement
- Education page
- Blog/News section
- Report form (location + description)
- Admin Dashboard to view submitted reports
- Built with Node.js, Express, MongoDB, EJS

## Setup
1. Clone the repo  
2. `npm install`  
3. Create a `.env` file with `MONGO_URI=<your MongoDB connection URI>`  
4. `npm start` to run  
5. Visit `http://localhost:3000` (or your host port)

## License
MIT
